// Generated by gencpp from file waypoint_maker/ObjectInfo.msg
// DO NOT EDIT!


#ifndef WAYPOINT_MAKER_MESSAGE_OBJECTINFO_H
#define WAYPOINT_MAKER_MESSAGE_OBJECTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace waypoint_maker
{
template <class ContainerAllocator>
struct ObjectInfo_
{
  typedef ObjectInfo_<ContainerAllocator> Type;

  ObjectInfo_()
    : objectCounts(0)
    , centerX()
    , centerY()
    , centerZ()
    , lengthX()
    , lengthY()
    , lengthZ()  {
    }
  ObjectInfo_(const ContainerAllocator& _alloc)
    : objectCounts(0)
    , centerX(_alloc)
    , centerY(_alloc)
    , centerZ(_alloc)
    , lengthX(_alloc)
    , lengthY(_alloc)
    , lengthZ(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _objectCounts_type;
  _objectCounts_type objectCounts;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _centerX_type;
  _centerX_type centerX;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _centerY_type;
  _centerY_type centerY;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _centerZ_type;
  _centerZ_type centerZ;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _lengthX_type;
  _lengthX_type lengthX;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _lengthY_type;
  _lengthY_type lengthY;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _lengthZ_type;
  _lengthZ_type lengthZ;





  typedef boost::shared_ptr< ::waypoint_maker::ObjectInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::waypoint_maker::ObjectInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectInfo_

typedef ::waypoint_maker::ObjectInfo_<std::allocator<void> > ObjectInfo;

typedef boost::shared_ptr< ::waypoint_maker::ObjectInfo > ObjectInfoPtr;
typedef boost::shared_ptr< ::waypoint_maker::ObjectInfo const> ObjectInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::waypoint_maker::ObjectInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::waypoint_maker::ObjectInfo_<ContainerAllocator1> & lhs, const ::waypoint_maker::ObjectInfo_<ContainerAllocator2> & rhs)
{
  return lhs.objectCounts == rhs.objectCounts &&
    lhs.centerX == rhs.centerX &&
    lhs.centerY == rhs.centerY &&
    lhs.centerZ == rhs.centerZ &&
    lhs.lengthX == rhs.lengthX &&
    lhs.lengthY == rhs.lengthY &&
    lhs.lengthZ == rhs.lengthZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::waypoint_maker::ObjectInfo_<ContainerAllocator1> & lhs, const ::waypoint_maker::ObjectInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace waypoint_maker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::waypoint_maker::ObjectInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::waypoint_maker::ObjectInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waypoint_maker::ObjectInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e6aef47c27b53cd5c80f176681e421e";
  }

  static const char* value(const ::waypoint_maker::ObjectInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e6aef47c27b53cdULL;
  static const uint64_t static_value2 = 0x5c80f176681e421eULL;
};

template<class ContainerAllocator>
struct DataType< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "waypoint_maker/ObjectInfo";
  }

  static const char* value(const ::waypoint_maker::ObjectInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 objectCounts\n"
"float64[] centerX\n"
"float64[] centerY\n"
"float64[] centerZ\n"
"float64[] lengthX\n"
"float64[] lengthY\n"
"float64[] lengthZ\n"
;
  }

  static const char* value(const ::waypoint_maker::ObjectInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objectCounts);
      stream.next(m.centerX);
      stream.next(m.centerY);
      stream.next(m.centerZ);
      stream.next(m.lengthX);
      stream.next(m.lengthY);
      stream.next(m.lengthZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::waypoint_maker::ObjectInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::waypoint_maker::ObjectInfo_<ContainerAllocator>& v)
  {
    s << indent << "objectCounts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.objectCounts);
    s << indent << "centerX[]" << std::endl;
    for (size_t i = 0; i < v.centerX.size(); ++i)
    {
      s << indent << "  centerX[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.centerX[i]);
    }
    s << indent << "centerY[]" << std::endl;
    for (size_t i = 0; i < v.centerY.size(); ++i)
    {
      s << indent << "  centerY[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.centerY[i]);
    }
    s << indent << "centerZ[]" << std::endl;
    for (size_t i = 0; i < v.centerZ.size(); ++i)
    {
      s << indent << "  centerZ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.centerZ[i]);
    }
    s << indent << "lengthX[]" << std::endl;
    for (size_t i = 0; i < v.lengthX.size(); ++i)
    {
      s << indent << "  lengthX[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lengthX[i]);
    }
    s << indent << "lengthY[]" << std::endl;
    for (size_t i = 0; i < v.lengthY.size(); ++i)
    {
      s << indent << "  lengthY[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lengthY[i]);
    }
    s << indent << "lengthZ[]" << std::endl;
    for (size_t i = 0; i < v.lengthZ.size(); ++i)
    {
      s << indent << "  lengthZ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lengthZ[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAYPOINT_MAKER_MESSAGE_OBJECTINFO_H
